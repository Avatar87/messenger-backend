{
  "stats": {
    "suites": 54,
    "tests": 126,
    "passes": 126,
    "pending": 0,
    "failures": 0,
    "start": "2019-02-13T17:10:27.753Z",
    "end": "2019-02-13T17:11:51.264Z",
    "duration": 83511,
    "testsRegistered": 126,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "5097960e-6f4d-48e6-a972-f3a596310c4f",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 1858,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "index_1.App.lifecycle.on(\"beforeInit\", () => __awaiter(this, void 0, void 0, function* () {\n    const port = yield exports.MongoServer.getPort();\n    const database = yield exports.MongoServer.getDbName();\n    exports.DB.setOptions({ address: \"localhost\", port, database });\n}));\nindex_1.App.lifecycle.on(\"afterInit\", () => {\n    exports.Agent = () => chai_1.default.request(index_1.App.get(\"server\").httpServer);\n    exports.Server = index_1.App.get(\"server\").httpServer;\n    done();\n});",
        "err": {},
        "isRoot": true,
        "uuid": "577baaa4-8b7d-46e3-b948-7a54adbf5eb0",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 2177,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(AMOUNT_OF_USERS);\n    data.account = data.users.pop();\n    authTokenOfAccount = data.account.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "b4cc8cbb-c485-4af2-98eb-3fe6d89be2bd",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 4666,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(AMOUNT_OF_USERS);\n    data.mainUser = data.users.pop();\n    data.anotherUser = data.users.pop();\n    data.mainUserBannedAccount = (yield faker_1.fakeBlacklist(1, [data.users.pop()], data.mainUser))[0];\n    data.anotherUserBannedAccount = (yield faker_1.fakeBlacklist(1, [data.users.pop()], data.anotherUser))[0];\n    data.userForManipulations = data.users.pop();\n    authTokenOfAccount = data.mainUser.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "ba967bab-aeb8-4eda-b5f9-3ea36e6e0e35",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 2185,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_2.fakeUsers(AMOUNT_OF_USERS);\n    data.mainUser = data.users.pop();\n    data.anotherUser = data.users.pop();\n    data.mainUserContact = (yield faker_2.fakeContacts(1, [data.users.pop()], data.mainUser))[0];\n    data.anotherUserContact = (yield faker_2.fakeContacts(1, [data.users.pop()], data.anotherUser))[0];\n    data.userForManipulations = data.users.pop();\n    authTokenOfAccount = data.mainUser.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "65e900b8-1e08-4a1f-9d5e-78809bf0c2dc",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 2403,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(AMOUNT_OF_USERS);\n    data.creator = data.users.pop();\n    data.user = data.users.pop();\n    data.groups = yield faker_1.fakeGroups(AMOUNT_OF_GROUPS, [data.creator]);\n    data.group = data.groups.pop();\n    data.directChats = yield faker_1.fakeDirectChats(AMOUNT_OF_CHATS, data.users, data.creator);\n    data.groupChats = yield faker_2.fakeGroupChats(AMOUNT_OF_CHATS, data.groups, data.users, data.creator);\n    data.chat = data.directChats[0];\n    authTokenOfCreator = data.creator.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "b3724809-d6c1-4848-8ece-b4ca5f5c3d54",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 389,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(1);\n    data.user = data.users.pop();\n    authToken = data.user.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "274c0828-8c6b-4901-8626-55a7b4fd6ebe",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 790,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(AMOUNT_OF_USERS);\n    data.creator = data.users.pop();\n    data.user = data.users.pop();\n    data.groups = yield faker_1.fakeGroups(AMOUNT_OF_GROUPS, [data.creator]);\n    yield data.groups.forEach((element) => {\n        faker_1.fakeGroupMembers(1, element, data.creator);\n    });\n    data.group = data.groups.pop();\n    groupId = data.group._id.toString();\n    authTokenOfCreator = data.creator.createToken();\n    authTokenOfUser = data.user.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "ed533bce-f837-418f-904c-dcd730aadc82",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 840,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(AMOUNT_OF_USERS);\n    data.creator = data.users.pop();\n    data.user = data.users.pop();\n    data.groups = yield faker_1.fakeGroups(AMOUNT_OF_GROUPS, [data.creator]);\n    data.group = data.groups.pop();\n    groupId = data.group._id.toString();\n    authTokenOfCreator = data.creator.createToken();\n    authTokenOfUser = data.user.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "20a2756f-5517-4866-a900-2a5c9077568e",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 10741,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.members = yield faker_1.fakeUsers(20);\n    data.notMembers = yield faker_1.fakeUsers(5);\n    data.creator = data.members[0];\n    data.memberButNotCreator = data.members[1];\n    data.userButNotMember = data.notMembers[1];\n    data.groups = yield faker_1.fakeGroups(1, data.creator);\n    data.group = data.groups[0];\n    data.members.map((item) => {\n        data.group.addMember(item);\n    });\n    data.countOfMembers = data.members.length;\n    groupId = data.group._id.toString();\n    authTokenOfMemberAndCreator = data.creator.createToken();\n    authTokenOfMemberButNotCreator = data.memberButNotCreator.createToken();\n    authTokenOfUserButNotMember = data.userButNotMember.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "8c9282c2-4266-4828-98a2-5408445e3700",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 2085,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(4);\n    data.firstPerson = data.users.pop();\n    data.secondPerson = data.users.pop();\n    data.anoutherPerson = data.users.pop();\n    data.groups = yield faker_1.fakeGroups(2, data.firstPerson);\n    data.group = data.groups[0];\n    data.anotherGroup = data.groups[1];\n    data.messages = yield faker_1.fakeGroupMessages(100, [data.group], [data.firstPerson, data.secondPerson]);\n    data.outherMessages = yield faker_1.fakeGroupMessages(2, [data.anotherGroup], [data.anoutherPerson, data.secondPerson]);\n    groupId = data.group._id.toString();\n    anotherGroupId = data.anotherGroup._id.toString();\n    authTokenOfFirstPerson = data.firstPerson.createToken();\n    authTokenOfSecondPerson = data.secondPerson.createToken();\n    authTokenOfAnOtherUser = data.anoutherPerson.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "9c06ebd6-c659-4af3-b558-0e1574f8a529",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 2127,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(4);\n    data.firstPerson = data.users.pop();\n    data.secondPerson = data.users.pop();\n    data.anoutherPerson = data.users.pop();\n    data.messages = yield faker_1.fakeUserConversation(100, [data.firstPerson, data.secondPerson]);\n    data.outherMessages = yield faker_1.fakeUserConversation(2, [data.anoutherPerson, data.secondPerson]);\n    secondPersonId = data.secondPerson._id.toString();\n    authTokenOfFirstPerson = data.firstPerson.createToken();\n    authTokenOfSecondPerson = data.secondPerson.createToken();\n    authTokenOfAnOtherUser = data.anoutherPerson.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "1d96c996-14ef-4d5c-9d60-3821648f3e0e",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before all\" hook",
        "fullTitle": "\"before all\" hook",
        "timedOut": false,
        "duration": 1789,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    data.users = yield faker_1.fakeUsers(AMOUNT_OF_USERS);\n    data.firstPerson = data.users.pop();\n    data.secondPerson = data.users.pop();\n    firstPersonId = data.firstPerson._id.toString();\n    firstPersonEmail = data.firstPerson.email;\n    authTokenOfFirstPerson = data.firstPerson.createToken();\n    authTokenOfSecondPerson = data.secondPerson.createToken();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "d1c519b9-9e56-4bd5-8edc-b985f1c5bb15",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [
      {
        "title": "\"after all\" hook",
        "fullTitle": "\"after all\" hook",
        "timedOut": false,
        "duration": 37,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "__awaiter(this, void 0, void 0, function* () {\n    yield index_1.App.stop();\n    yield exports.MongoServer.stop();\n})",
        "err": {},
        "isRoot": true,
        "uuid": "4b418c4b-86ee-4a3a-be86-579a9138e2ed",
        "isHook": true,
        "skipped": false
      }
    ],
    "tests": [],
    "suites": [
      {
        "uuid": "2ad388dd-b561-4bb1-b17b-a0dabf786888",
        "title": "Account API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Account.spec.ts",
        "file": "\\test\\api\\Account\\Account.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e6bfb251-77e4-45b9-9871-36441bd963f4",
            "title": "GET /account",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Account.spec.ts",
            "file": "\\test\\api\\Account\\Account.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting account profile",
                "fullTitle": "Account API GET /account Successful getting account profile",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/account`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"email\");\n            res.body.should.have.property(\"profile\");\n            res.body.profile.should.have.property(\"username\");\n            res.body.profile.should.have.property(\"fullname\");\n            res.body.profile.should.have.property(\"last_seen\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "b1a476c2-8c4f-45fc-a0de-c8190df815d9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b1a476c2-8c4f-45fc-a0de-c8190df815d9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 35,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "af562073-3304-4432-a49a-3ec845ab8e2c",
            "title": "PUT /account",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Account.spec.ts",
            "file": "\\test\\api\\Account\\Account.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Wrong old password (Credentials are wrong)",
                "fullTitle": "Account API PUT /account Wrong old password (Credentials are wrong)",
                "timedOut": false,
                "duration": 502,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().put(`/account`)\n                .send({\n                oldPassword: \"wrongPassword\",\n                newPassword: \"some password\",\n            })\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"Credentials are wrong\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "55f980d3-406d-4262-b2af-72f3c636d502",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Wrong new password (Validation error)",
                "fullTitle": "Account API PUT /account Wrong new password (Validation error)",
                "timedOut": false,
                "duration": 491,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().put(`/account`)\n                .send({\n                oldPassword: \"012345678\",\n                newPassword: \"12345\",\n            })\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "25a73baa-2c4b-45fc-b8dd-81a02866732d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful update accoount",
                "fullTitle": "Account API PUT /account Successful update accoount",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().put(`/account`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"email\");\n            res.body.should.have.property(\"profile\");\n            res.body.profile.should.have.property(\"username\");\n            res.body.profile.should.have.property(\"fullname\");\n            res.body.profile.should.have.property(\"last_seen\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f8c3ff46-c2a1-409d-bd22-92e9908440b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "55f980d3-406d-4262-b2af-72f3c636d502",
              "25a73baa-2c4b-45fc-b8dd-81a02866732d",
              "f8c3ff46-c2a1-409d-bd22-92e9908440b8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1008,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "a88d9ff6-caf2-4fe5-8eb6-5568ccae4a03",
        "title": "Blacklist API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Blacklist.spec.ts",
        "file": "\\test\\api\\Account\\Blacklist.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1eedace1-3af0-4478-a64a-888e7cc504e5",
            "title": "Get blacklist GET /account/blacklist",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Blacklist.spec.ts",
            "file": "\\test\\api\\Account\\Blacklist.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting contacts",
                "fullTitle": "Blacklist API Get blacklist GET /account/blacklist Successful getting contacts",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/account/blacklist`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"user\");\n            res.body.should.have.property(\"offset\");\n            res.body.should.have.property(\"data\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "fb8c674a-2b9f-46dc-8cdc-d6ba90569c17",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fb8c674a-2b9f-46dc-8cdc-d6ba90569c17"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "79d4f23b-e19d-4784-85e1-91a5a8cca2fd",
            "title": "Post new user to blacklist POST /account/blacklist",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Blacklist.spec.ts",
            "file": "\\test\\api\\Account\\Blacklist.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful posting contact",
                "fullTitle": "Blacklist API Post new user to blacklist POST /account/blacklist Successful posting contact",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/account/blacklist/`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`)\n                .send({ id: data.userForManipulations._id });\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"addedAt\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "ea7827cb-d6e2-4d42-9e30-bac2557537fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful posting same account",
                "fullTitle": "Blacklist API Post new user to blacklist POST /account/blacklist Successful posting same account",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/account/blacklist/`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`)\n                .send({ id: data.userForManipulations._id });\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"addedAt\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "c1b52840-4b83-45ba-b1fa-a026dea87ccf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of posting account - property id is required",
                "fullTitle": "Blacklist API Post new user to blacklist POST /account/blacklist Error of posting account - property id is required",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/account/contacts/`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "5a2f4b19-30ca-4f03-97aa-3544d646cf1a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea7827cb-d6e2-4d42-9e30-bac2557537fd",
              "c1b52840-4b83-45ba-b1fa-a026dea87ccf",
              "5a2f4b19-30ca-4f03-97aa-3544d646cf1a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 61,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "2e8563df-a6c7-4dde-8e8f-71da92a98758",
            "title": "Delete account from blacklist DELETE /account/blacklist/%id",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Blacklist.spec.ts",
            "file": "\\test\\api\\Account\\Blacklist.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful deleting contact",
                "fullTitle": "Blacklist API Delete account from blacklist DELETE /account/blacklist/%id Successful deleting contact",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/account/blacklist/${data.mainUserBannedAccount._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "51c3b20d-eb74-4c31-b818-8cabb116a187",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful result of deleting wrong contact",
                "fullTitle": "Blacklist API Delete account from blacklist DELETE /account/blacklist/%id Successful result of deleting wrong contact",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/account/blacklist/${data.anotherUserBannedAccount._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "997513a7-1e45-4d6c-8fb3-27dcbb4402b4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51c3b20d-eb74-4c31-b818-8cabb116a187",
              "997513a7-1e45-4d6c-8fb3-27dcbb4402b4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "0761281b-717f-4bd2-b873-e5a541830575",
        "title": "Contacts API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Contacts.spec.ts",
        "file": "\\test\\api\\Account\\Contacts.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "18b88909-e345-40a0-bfaa-faa3bcc20bcd",
            "title": "Get contacts GET /account/contacts",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Contacts.spec.ts",
            "file": "\\test\\api\\Account\\Contacts.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting contacts",
                "fullTitle": "Contacts API Get contacts GET /account/contacts Successful getting contacts",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/account/contacts`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"user\");\n            res.body.should.have.property(\"offset\");\n            res.body.should.have.property(\"data\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f93e7b94-7957-494a-9aa3-b5031c4cbd97",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f93e7b94-7957-494a-9aa3-b5031c4cbd97"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "78f1527f-ab60-4305-aa03-ffb99e6aa47c",
            "title": "Get contact by id GET /account/contacts/%id",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Contacts.spec.ts",
            "file": "\\test\\api\\Account\\Contacts.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting contact",
                "fullTitle": "Contacts API Get contact by id GET /account/contacts/%id Successful getting contact",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/account/contacts/${data.mainUserContact._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"contact\");\n            res.body.should.have.property(\"byname\");\n            res.body.should.have.property(\"addedAt\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "81223909-38b9-4149-89e1-a21131e376d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting contact - contact with such id is not exist",
                "fullTitle": "Contacts API Get contact by id GET /account/contacts/%id Error of getting contact - contact with such id is not exist",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/account/contacts/${data.anotherUserContact._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"Contact with such id was not found\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "6f99f5a4-4306-4b1d-89da-e100609271c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81223909-38b9-4149-89e1-a21131e376d5",
              "6f99f5a4-4306-4b1d-89da-e100609271c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 46,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "a2127186-3efe-46d3-9459-514fc657d478",
            "title": "Post new contact POST /account/contacts",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Contacts.spec.ts",
            "file": "\\test\\api\\Account\\Contacts.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful posting contact",
                "fullTitle": "Contacts API Post new contact POST /account/contacts Successful posting contact",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/account/contacts/`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`)\n                .send({ user: data.userForManipulations._id, byname });\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"contact\");\n            res.body.should.have.property(\"byname\").equal(byname);\n            res.body.should.have.property(\"addedAt\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "c3b1bc92-ff6e-48cc-b335-204bea62c31f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful posting same contact - property byname is not sent",
                "fullTitle": "Contacts API Post new contact POST /account/contacts Successful posting same contact - property byname is not sent",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/account/contacts/`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`)\n                .send({ user: data.userForManipulations._id });\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"contact\");\n            res.body.should.have.property(\"byname\").equal(null);\n            res.body.should.have.property(\"addedAt\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "266fb6a1-b70f-4289-b9d8-8cd93c4ac56a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of posting account - property user is required",
                "fullTitle": "Contacts API Post new contact POST /account/contacts Error of posting account - property user is required",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/account/contacts/`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`)\n                .send({ byname });\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "14968e0e-2a5d-4653-b6e2-23cbd6601fd1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of posting account - the user property is uncorrect",
                "fullTitle": "Contacts API Post new contact POST /account/contacts Error of posting account - the user property is uncorrect",
                "timedOut": false,
                "duration": 44962,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/account/contacts/`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`)\n                .send({ user: undefined });\n            console.log(\"Console Test the user property is uncorrect:\" + res.body.message);\n            process.emitWarning(\"Emit Test the user property is uncorrect:\" + res.body.message);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "88273390-a5b4-4986-a5c0-723791626d2b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c3b1bc92-ff6e-48cc-b335-204bea62c31f",
              "266fb6a1-b70f-4289-b9d8-8cd93c4ac56a",
              "14968e0e-2a5d-4653-b6e2-23cbd6601fd1",
              "88273390-a5b4-4986-a5c0-723791626d2b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 45009,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "e31e6e4e-0547-4524-a8d7-5a55c5f0cceb",
            "title": "Put contact byname PUT /account/contacts/%id",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Contacts.spec.ts",
            "file": "\\test\\api\\Account\\Contacts.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful setting byname to contact",
                "fullTitle": "Contacts API Put contact byname PUT /account/contacts/%id Successful setting byname to contact",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const newName = faker_1.default.lorem.text();\n            const res = yield Bootstrap_1.Agent().put(`/account/contacts/${data.mainUserContact._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`)\n                .send({ byname: newName });\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"contact\");\n            res.body.should.have.property(\"byname\");\n            res.body.should.have.property(\"addedAt\");\n            res.body.byname.should.be.equal(newName);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "3f176781-ca80-47a7-9dbf-8935f1d56e42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error with setting byname to contact - contact with such id is not exist",
                "fullTitle": "Contacts API Put contact byname PUT /account/contacts/%id Error with setting byname to contact - contact with such id is not exist",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().put(`/account/contacts/${data.anotherUserContact._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`)\n                .send({ byname: faker_1.default.lorem.text() });\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"Contact with such id was not found\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "af39cfd9-fe4b-4bc3-afc8-40faa5e83404",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error with setting byname to contact - property byname is required",
                "fullTitle": "Contacts API Put contact byname PUT /account/contacts/%id Error with setting byname to contact - property byname is required",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().put(`/account/contacts/${data.mainUserContact._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "738b1ce3-591a-4245-a2a8-6a1f7a0f3ad0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3f176781-ca80-47a7-9dbf-8935f1d56e42",
              "af39cfd9-fe4b-4bc3-afc8-40faa5e83404",
              "738b1ce3-591a-4245-a2a8-6a1f7a0f3ad0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 57,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "e2af21da-d806-4ac1-adb6-8dd77289f56b",
            "title": "Delete contact DELETE /account/contacts/%id",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Account\\Contacts.spec.ts",
            "file": "\\test\\api\\Account\\Contacts.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful deleting contact",
                "fullTitle": "Contacts API Delete contact DELETE /account/contacts/%id Successful deleting contact",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/account/contacts/${data.mainUserContact._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d174a400-c2b0-4db1-91ff-18f54aed9cbb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful result of deleting wrong contact",
                "fullTitle": "Contacts API Delete contact DELETE /account/contacts/%id Successful result of deleting wrong contact",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/account/contacts/${data.anotherUserContact._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfAccount}`);\n            res.should.have.status(200);\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "c021b254-3cc1-4e3f-8d6b-a3e71ec72d4d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d174a400-c2b0-4db1-91ff-18f54aed9cbb",
              "c021b254-3cc1-4e3f-8d6b-a3e71ec72d4d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "ced61a80-f953-4f56-9f41-9b9b87e1c29f",
        "title": "Auth API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Auth.spec.ts",
        "file": "\\test\\api\\Auth.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0acf5896-ffc0-47f8-bcdd-efe46621f24b",
            "title": "POST: /auth/login",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Auth.spec.ts",
            "file": "\\test\\api\\Auth.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful login",
                "fullTitle": "Auth API POST: /auth/login Successful login",
                "timedOut": false,
                "duration": 934,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const name = \"Tester\";\n            const email = Math.random() + \"tester@com.ru\";\n            const password = \"012345678\";\n            const user = yield Bootstrap_1.DB.getModel(\"User\").registration(email, password, name);\n            const res = yield Bootstrap_1.Agent().post(\"/auth/login\").send({ email, password });\n            res.should.have.status(200);\n            const loginedUser = yield Bootstrap_1.DB.getModel(\"User\").findByToken(res.body.token);\n            loginedUser.id.should.be.equal(user.id);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "388c6ef6-d43a-4ce2-9f14-52d55a2ce299",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Login error because password is wrong",
                "fullTitle": "Auth API POST: /auth/login Login error because password is wrong",
                "timedOut": false,
                "duration": 1009,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const name = \"Tester\";\n            const email = Math.random() + \"tester@com.ru\";\n            const password = \"012345678\";\n            const anotherPassword = \"abcdefgh\";\n            yield Bootstrap_1.DB.getModel(\"User\").registration(email, password, name);\n            const res = yield Bootstrap_1.Agent().post(\"/auth/login\").send({ email, password: anotherPassword });\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"Credentials are wrong\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "0dc86cb9-4c9e-4a32-83d4-452467c85f17",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Login error because email does not exist",
                "fullTitle": "Auth API POST: /auth/login Login error because email does not exist",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const email = Math.random() + \"tester@com.ru\";\n            const password = \"012345678\";\n            const res = yield Bootstrap_1.Agent().post(\"/auth/login\").send({ email, password });\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"Credentials are wrong\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "b2c8a615-1fd7-4609-96d6-a931c36b8dd5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "388c6ef6-d43a-4ce2-9f14-52d55a2ce299",
              "0dc86cb9-4c9e-4a32-83d4-452467c85f17",
              "b2c8a615-1fd7-4609-96d6-a931c36b8dd5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1951,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "4c9bffb1-3cdd-4a9d-b86c-3853a31e99ce",
            "title": "POST: /auth/registration",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Auth.spec.ts",
            "file": "\\test\\api\\Auth.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful registration",
                "fullTitle": "Auth API POST: /auth/registration Successful registration",
                "timedOut": false,
                "duration": 430,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const name = \"Tester\";\n            const email = Math.random() + \"tester@com.ru\";\n            const password = \"012345678\";\n            const res = yield Bootstrap_1.Agent().post(\"/auth/registration\").send({ name, email, password });\n            res.should.have.status(201);\n            const registeredUser = yield Bootstrap_1.DB.getModel(\"User\").findByToken(res.body.token);\n            registeredUser.id.should.be.equal(res.body.user.id);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "dbb71730-9aba-4dd4-81ae-7f09c2ec028f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Registration error because email has already existed",
                "fullTitle": "Auth API POST: /auth/registration Registration error because email has already existed",
                "timedOut": false,
                "duration": 434,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const name = \"Tester\";\n            const email = Math.random() + \"tester@com.ru\";\n            const password = \"012345678\";\n            yield Bootstrap_1.Agent().post(\"/auth/registration\").send({ name, email, password });\n            const res = yield Bootstrap_1.Agent().post(\"/auth/registration\").send({ name, email, password });\n            res.should.have.status(409);\n            res.body.message.should.be.equal(\"This email has already existed\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "5d991267-3a05-4a54-9c06-c27bbfa81370",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Registration error because you have not sent required fields",
                "fullTitle": "Auth API POST: /auth/registration Registration error because you have not sent required fields",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(\"/auth/registration\").send();\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "cd3684cf-508b-4c71-a7bf-31dd6ff2abd4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dbb71730-9aba-4dd4-81ae-7f09c2ec028f",
              "5d991267-3a05-4a54-9c06-c27bbfa81370",
              "cd3684cf-508b-4c71-a7bf-31dd6ff2abd4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 870,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "edc4a564-aaef-44a9-a8e0-bc279ba0c830",
        "title": "Chat API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Chat.spec.ts",
        "file": "\\test\\api\\Chat.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f28865fd-5d96-4428-8dd7-e4fba4e29978",
            "title": "GET: /account/chats",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Chat.spec.ts",
            "file": "\\test\\api\\Chat.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successfull",
                "fullTitle": "Chat API GET: /account/chats Successfull",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/account/chats`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"offset\");\n            res.body.should.have.property(\"data\");\n            res.body.offset.should.be.equal(0);\n            res.body.data.should.have.lengthOf(4);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f109b992-4a73-4389-812b-d7cab1119f36",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successfull with offset",
                "fullTitle": "Chat API GET: /account/chats Successfull with offset",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/account/chats?offset=2`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"offset\");\n            res.body.should.have.property(\"data\");\n            res.body.offset.should.be.equal(2);\n            res.body.data.should.have.lengthOf(2);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "15b12901-b049-402c-bf3c-da0ecd3ae354",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f109b992-4a73-4389-812b-d7cab1119f36",
              "15b12901-b049-402c-bf3c-da0ecd3ae354"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 25,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "a17a55d0-9cb8-4d6e-8461-37c04e8e4248",
            "title": "DELETE: /account/chats/:chatId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Chat.spec.ts",
            "file": "\\test\\api\\Chat.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successfull",
                "fullTitle": "Chat API DELETE: /account/chats/:chatId Successfull",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/account/chats/${data.chat._id}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"message\");\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "faaa120a-2e64-42c8-9a6c-1a01024044e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "faaa120a-2e64-42c8-9a6c-1a01024044e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "46e15f27-34bc-42e9-af32-0c23c77eb031",
        "title": "Find by token Middleware",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\FindByToken.spec.ts",
        "file": "\\test\\api\\FindByToken.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "No token",
            "fullTitle": "Find by token Middleware No token",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "__awaiter(this, void 0, void 0, function* () {\n        const res = yield Bootstrap_1.Agent().get(`/anyRoute`);\n        res.should.have.status(401);\n        res.body.message.should.be.equal(\"No valid token\");\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "c3786be9-a543-4834-8129-4abd79bc0455",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Error token",
            "fullTitle": "Find by token Middleware Error token",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "__awaiter(this, void 0, void 0, function* () {\n        const res = yield Bootstrap_1.Agent().get(`/anyRoute`)\n            .set(\"Authorization\", `wrongToken`);\n        res.should.have.status(401);\n        res.body.message.should.be.equal(\"No valid token\");\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "c28e8aa3-3fb7-41c3-ba7d-242a2cd8802b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Right token, error header",
            "fullTitle": "Find by token Middleware Right token, error header",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "__awaiter(this, void 0, void 0, function* () {\n        const res = yield Bootstrap_1.Agent().get(`/anyRoute`)\n            .set(\"Authorization\", `${authToken}`);\n        res.should.have.status(401);\n        res.body.message.should.be.equal(\"No valid token\");\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "3d1e6ed8-dea0-4169-a7aa-d861cbf09589",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c3786be9-a543-4834-8129-4abd79bc0455",
          "c28e8aa3-3fb7-41c3-ba7d-242a2cd8802b",
          "3d1e6ed8-dea0-4169-a7aa-d861cbf09589"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 15,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "dff7c19c-292d-493a-ab92-a03cbf503e5d",
        "title": "Groups API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Group.spec.ts",
        "file": "\\test\\api\\Groups\\Group.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3dabfdba-f2fe-4bc9-ad35-3807e0909044",
            "title": "GET /groups/:groupId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Group.spec.ts",
            "file": "\\test\\api\\Groups\\Group.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting group profile for a member",
                "fullTitle": "Groups API GET /groups/:groupId Successful getting group profile for a member",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"creator\");\n            res.body.should.have.property(\"name\");\n            res.body.should.have.property(\"description\");\n            res.body.should.have.property(\"invitation_code\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d652595c-b4aa-4122-b48f-e3036ea65a23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful getting group profile with invitation code",
                "fullTitle": "Groups API GET /groups/:groupId Successful getting group profile with invitation code",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}?invitation_code=inviteGoodPeople`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"creator\");\n            res.body.should.have.property(\"name\");\n            res.body.should.have.property(\"description\");\n            res.body.should.have.property(\"invitation_code\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "a94da4ff-99fd-468d-a189-8cedd0a57258",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Not a member, no invitation code",
                "fullTitle": "Groups API GET /groups/:groupId Not a member, no invitation code",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfUser}`);\n            res.should.have.status(403);\n            res.body.message.should.be.equal(\"You cannot do it\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "2237c2e1-b804-4053-a4b3-ac44b50a2717",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d652595c-b4aa-4122-b48f-e3036ea65a23",
              "a94da4ff-99fd-468d-a189-8cedd0a57258",
              "2237c2e1-b804-4053-a4b3-ac44b50a2717"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "bc268983-8aa5-47a1-849b-929103490591",
            "title": "POST /groups",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Group.spec.ts",
            "file": "\\test\\api\\Groups\\Group.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful creating",
                "fullTitle": "Groups API POST /groups Successful creating",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/groups`)\n                .send({\n                name: \"created group\",\n            })\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"creator\");\n            res.body.should.have.property(\"name\");\n            res.body.should.have.property(\"description\");\n            res.body.should.have.property(\"invitation_code\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "54651f41-e3d7-47f6-b779-9a6d54fe0eb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "No name for group",
                "fullTitle": "Groups API POST /groups No name for group",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/groups`)\n                .send({\n                description: \"created group\",\n            })\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d83dbf88-7b0f-4508-8810-20f44ec8d826",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "54651f41-e3d7-47f6-b779-9a6d54fe0eb4",
              "d83dbf88-7b0f-4508-8810-20f44ec8d826"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "46982527-086a-42bd-942a-4c5b406b8b15",
            "title": "PUT /groups/:groupId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Group.spec.ts",
            "file": "\\test\\api\\Groups\\Group.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful updating group",
                "fullTitle": "Groups API PUT /groups/:groupId Successful updating group",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().put(`/groups/${groupId}`)\n                .send({\n                description: \"updated description\",\n            })\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"creator\");\n            res.body.should.have.property(\"name\");\n            res.body.should.have.property(\"description\");\n            res.body.should.have.property(\"invitation_code\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "e50f7c09-1e86-4934-ab61-6ba72ebfd1fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Not creator",
                "fullTitle": "Groups API PUT /groups/:groupId Not creator",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().put(`/groups/${groupId}`)\n                .send({\n                description: \"not in group\",\n            })\n                .set(\"Authorization\", `Bearer ${authTokenOfUser}`);\n            res.should.have.status(403);\n            res.body.message.should.be.equal(\"You cannot do it\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "17136f7a-5a9c-4bcf-9aae-fadb1953fc94",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e50f7c09-1e86-4934-ab61-6ba72ebfd1fa",
              "17136f7a-5a9c-4bcf-9aae-fadb1953fc94"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 40,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "3560d992-430e-490b-93dc-581ce40813e7",
            "title": "UNLINK /groups/:groupId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Group.spec.ts",
            "file": "\\test\\api\\Groups\\Group.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Success remove",
                "fullTitle": "Groups API UNLINK /groups/:groupId Success remove",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().unlink(`/groups/${groupId}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "441e5ff5-bfc0-4732-83cb-d4642d9e3552",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "441e5ff5-bfc0-4732-83cb-d4642d9e3552"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "6caa121b-43b2-4d47-b07a-8b79958d4fad",
            "title": "LINK /groups",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Group.spec.ts",
            "file": "\\test\\api\\Groups\\Group.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successfull enter the group",
                "fullTitle": "Groups API LINK /groups Successfull enter the group",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().link(`/groups?invitation_code=inviteGoodPeople`)\n                .set(\"Authorization\", `Bearer ${authTokenOfUser}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"creator\");\n            res.body.should.have.property(\"name\");\n            res.body.should.have.property(\"description\");\n            res.body.should.have.property(\"invitation_code\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "1159cab8-6969-45f6-b10d-09ddf7d0bf22",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Wrong invitation code",
                "fullTitle": "Groups API LINK /groups Wrong invitation code",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().link(`/groups?invitation_code=someWrongCode`)\n                .set(\"Authorization\", `Bearer ${authTokenOfUser}`);\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"Credentials are wrong\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "e1d9c622-eb11-4cd4-b68c-552778a7d700",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1159cab8-6969-45f6-b10d-09ddf7d0bf22",
              "e1d9c622-eb11-4cd4-b68c-552778a7d700"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "23dec65c-f7d2-484c-a4df-53891c7b9493",
        "title": "Group invites API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\GroupInvites.spec.ts",
        "file": "\\test\\api\\Groups\\GroupInvites.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fadaa723-06c2-446d-81d1-13af40c8decd",
            "title": "Get invitation code GET /groups/%id/invites",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\GroupInvites.spec.ts",
            "file": "\\test\\api\\Groups\\GroupInvites.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "No token",
                "fullTitle": "Group invites API Get invitation code GET /groups/%id/invites No token",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/invites`);\n            res.should.have.status(401);\n            res.body.message.should.be.equal(\"No valid token\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "e766ca2c-1620-4d83-8377-6a40627b2c04",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error token",
                "fullTitle": "Group invites API Get invitation code GET /groups/%id/invites Error token",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `wrongToken`);\n            res.should.have.status(401);\n            res.body.message.should.be.equal(\"No valid token\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "a1cceebd-4b5b-426e-b1ad-31fa1caa18bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Not creator",
                "fullTitle": "Group invites API Get invitation code GET /groups/%id/invites Not creator",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `Bearer ${authTokenOfUser}`);\n            res.should.have.status(403);\n            res.body.message.should.be.equal(\"You cannot do it\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "7e36f37f-2cd8-47f0-a875-6a133e526cf8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful getting group profile",
                "fullTitle": "Group invites API Get invitation code GET /groups/%id/invites Successful getting group profile",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"active\");\n            res.body.should.have.property(\"invitation_code\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "aaa8f3ab-8f5d-47e1-b7af-c307a18ab9cf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e766ca2c-1620-4d83-8377-6a40627b2c04",
              "a1cceebd-4b5b-426e-b1ad-31fa1caa18bc",
              "7e36f37f-2cd8-47f0-a875-6a133e526cf8",
              "aaa8f3ab-8f5d-47e1-b7af-c307a18ab9cf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 46,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "67cb497a-010b-4b71-a0a7-0d9f3cd0f4b6",
            "title": "Create invitation code POST /groups/%id/invites",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\GroupInvites.spec.ts",
            "file": "\\test\\api\\Groups\\GroupInvites.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "No token",
                "fullTitle": "Group invites API Create invitation code POST /groups/%id/invites No token",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/invites`);\n            res.should.have.status(401);\n            res.body.message.should.be.equal(\"No valid token\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f457824f-a9c4-4a5e-ab1e-74e6c0da31cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error token",
                "fullTitle": "Group invites API Create invitation code POST /groups/%id/invites Error token",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `wrongToken`);\n            res.should.have.status(401);\n            res.body.message.should.be.equal(\"No valid token\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "a46dee21-576a-4d52-b42c-2374c8fb3097",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Not creator",
                "fullTitle": "Group invites API Create invitation code POST /groups/%id/invites Not creator",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `Bearer ${authTokenOfUser}`);\n            res.should.have.status(403);\n            res.body.message.should.be.equal(\"You cannot do it\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "fad82418-dd5a-449a-a354-0fe4c9c9cc50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful creating",
                "fullTitle": "Group invites API Create invitation code POST /groups/%id/invites Successful creating",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"active\");\n            res.body.should.have.property(\"invitation_code\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "ea741b33-675e-416d-8a0d-e35b52c7654f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f457824f-a9c4-4a5e-ab1e-74e6c0da31cc",
              "a46dee21-576a-4d52-b42c-2374c8fb3097",
              "fad82418-dd5a-449a-a354-0fe4c9c9cc50",
              "ea741b33-675e-416d-8a0d-e35b52c7654f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 57,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "3d6bfe13-6192-488f-b77e-b58f83d8d8fd",
            "title": "Delete invitation code DELETE /groups/%id/invites",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\GroupInvites.spec.ts",
            "file": "\\test\\api\\Groups\\GroupInvites.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "No token",
                "fullTitle": "Group invites API Delete invitation code DELETE /groups/%id/invites No token",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/groups/${groupId}/invites`);\n            res.should.have.status(401);\n            res.body.message.should.be.equal(\"No valid token\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "0a74d492-be03-452e-adcb-dc5014b827ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error token",
                "fullTitle": "Group invites API Delete invitation code DELETE /groups/%id/invites Error token",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `wrongToken`);\n            res.should.have.status(401);\n            res.body.message.should.be.equal(\"No valid token\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "bf955740-ff62-4806-b380-bea7062f6f3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Not creator",
                "fullTitle": "Group invites API Delete invitation code DELETE /groups/%id/invites Not creator",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `Bearer ${authTokenOfUser}`);\n            res.should.have.status(403);\n            res.body.message.should.be.equal(\"You cannot do it\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d2058154-a741-4a01-ba3d-e09a509b1348",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful updating group",
                "fullTitle": "Group invites API Delete invitation code DELETE /groups/%id/invites Successful updating group",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().delete(`/groups/${groupId}/invites`)\n                .set(\"Authorization\", `Bearer ${authTokenOfCreator}`);\n            res.should.have.status(200);\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "a04952a2-10c7-4297-a019-8beffe26df07",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a74d492-be03-452e-adcb-dc5014b827ad",
              "bf955740-ff62-4806-b380-bea7062f6f3e",
              "d2058154-a741-4a01-ba3d-e09a509b1348",
              "a04952a2-10c7-4297-a019-8beffe26df07"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 54,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "9072c3db-a362-4eb9-9529-144074822c64",
        "title": "Group member API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Member.spec.ts",
        "file": "\\test\\api\\Groups\\Member.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "75cb9fe9-4a35-4e65-8dac-271b44d03401",
            "title": "GET: /groups/:groupId/members",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Member.spec.ts",
            "file": "\\test\\api\\Groups\\Member.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting members of group",
                "fullTitle": "Group member API GET: /groups/:groupId/members Successful getting members of group",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/members`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(200);\n            res.body.group_id.should.be.equal(groupId);\n            res.body.offset.should.be.equal(0);\n            res.body.data.should.have.lengthOf(data.countOfMembers);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "8150c087-8f6f-4aea-a8bc-e8a0750d5b9d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful getting members of group  - use offset",
                "fullTitle": "Group member API GET: /groups/:groupId/members Successful getting members of group  - use offset",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const offset = 10;\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/members`)\n                .query({ offset })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(200);\n            res.body.group_id.should.be.equal(groupId);\n            res.body.offset.should.be.equal(offset);\n            res.body.data.should.have.lengthOf(data.countOfMembers - offset);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d07840e2-2789-4588-87a7-7d2b9ac66719",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting group members - group is not exist",
                "fullTitle": "Group member API GET: /groups/:groupId/members Error of getting group members - group is not exist",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(\"/groups/groupNotExist/members\")\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "09e5c0f7-8e36-48ac-817d-c535516d85ec",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting group members - group is exist, but auth user is not member",
                "fullTitle": "Group member API GET: /groups/:groupId/members Error of getting group members - group is exist, but auth user is not member",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/members`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfUserButNotMember);\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"This group not found or not allowed for you\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "8dc995bd-79d9-4357-a451-d78fcdb982a9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8150c087-8f6f-4aea-a8bc-e8a0750d5b9d",
              "d07840e2-2789-4588-87a7-7d2b9ac66719",
              "09e5c0f7-8e36-48ac-817d-c535516d85ec",
              "8dc995bd-79d9-4357-a451-d78fcdb982a9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 128,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "437dc342-70af-409f-b397-11d2d5f3fdf8",
            "title": "POST: /groups/:groupId/members",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Member.spec.ts",
            "file": "\\test\\api\\Groups\\Member.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful adding user to group",
                "fullTitle": "Group member API POST: /groups/:groupId/members Successful adding user to group",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const user = data.notMembers.pop()._id;\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/members`)\n                .send({ user })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(200);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "afeb503f-dccc-4a46-9c8c-d8c94569afa2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful adding member to group although member has already been added",
                "fullTitle": "Group member API POST: /groups/:groupId/members Successful adding member to group although member has already been added",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const user = data.members[2]._id;\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/members`)\n                .send({ user })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(200);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "aaae40f0-b9ce-497d-adaf-5ee2264ad93c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of adding member to group - group is not exist",
                "fullTitle": "Group member API POST: /groups/:groupId/members Error of adding member to group - group is not exist",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const user = data.members[2]._id;\n            const res = yield Bootstrap_1.Agent().post(\"/groups/groupNotExist/members\")\n                .send({ user })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "cb63910c-87aa-4113-aeb3-79c7f51823cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of adding member to group - user is not exist",
                "fullTitle": "Group member API POST: /groups/:groupId/members Error of adding member to group - user is not exist",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const user = \"userIsNotExist\";\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/members`)\n                .send({ user })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "88eb2638-879e-4ca8-acfd-ff32d18ebe70",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of adding member to group - not group member cannot do it",
                "fullTitle": "Group member API POST: /groups/:groupId/members Error of adding member to group - not group member cannot do it",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const user = data.members[2]._id;\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/members`)\n                .send({ user })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfUserButNotMember);\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"This group not found or not allowed for you\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "bf53d027-8962-4973-af25-5a6b6e1dfaf5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of adding member to group - user id does not get in body",
                "fullTitle": "Group member API POST: /groups/:groupId/members Error of adding member to group - user id does not get in body",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/members`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfUserButNotMember);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "2313a384-5235-4a5f-b50a-53b9b853e95b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "afeb503f-dccc-4a46-9c8c-d8c94569afa2",
              "aaae40f0-b9ce-497d-adaf-5ee2264ad93c",
              "cb63910c-87aa-4113-aeb3-79c7f51823cb",
              "88eb2638-879e-4ca8-acfd-ff32d18ebe70",
              "bf53d027-8962-4973-af25-5a6b6e1dfaf5",
              "2313a384-5235-4a5f-b50a-53b9b853e95b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 104,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "a91e224c-9bc8-4c58-9870-b33b3288c00b",
            "title": "PUT: /groups/:groupId/members/:userId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Member.spec.ts",
            "file": "\\test\\api\\Groups\\Member.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful change role for member from group",
                "fullTitle": "Group member API PUT: /groups/:groupId/members/:userId Successful change role for member from group",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.memberButNotCreator._id.toString();\n            const res = yield Bootstrap_1.Agent().put(`/groups/${groupId}/members/${userId}`)\n                .send({ role: \"moderator\" })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberAndCreator);\n            res.should.have.status(200);\n            res.body.should.have.property(\"user\");\n            res.body.should.have.property(\"role\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d741d581-2c9b-4695-a599-d95ac6b4a9ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error changing role - only group's creator can do it",
                "fullTitle": "Group member API PUT: /groups/:groupId/members/:userId Error changing role - only group's creator can do it",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.memberButNotCreator._id.toString();\n            const res = yield Bootstrap_1.Agent().put(`/groups/${groupId}/members/${userId}`)\n                .send({ role: \"moderator\" })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(403);\n            res.body.message.should.be.equal(\"You cannot do it\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "32fe24e4-6524-423b-8a25-0c9347392236",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error changing role - user is not member",
                "fullTitle": "Group member API PUT: /groups/:groupId/members/:userId Error changing role - user is not member",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.userButNotMember._id.toString();\n            const res = yield Bootstrap_1.Agent().put(`/groups/${groupId}/members/${userId}`)\n                .send({ role: \"moderator\" })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberAndCreator);\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"This group not found or not allowed for you\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "656ca38d-8295-4473-8857-d07e0341ca13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error changing role - wrong role",
                "fullTitle": "Group member API PUT: /groups/:groupId/members/:userId Error changing role - wrong role",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.members[2]._id.toString();\n            const res = yield Bootstrap_1.Agent().put(`/groups/groupNotExist/members/${userId}`)\n                .send({ role: \"wrongRole\" })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberAndCreator);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "02f6f0a6-60ea-4c51-a5f7-4e1a52c85a64",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error changing role - group is not id",
                "fullTitle": "Group member API PUT: /groups/:groupId/members/:userId Error changing role - group is not id",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.members[2]._id.toString();\n            const res = yield Bootstrap_1.Agent().put(`/groups/groupNotExist/members/${userId}`)\n                .send({ role: \"moderator\" })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "bfa2e4a0-faff-4801-86d1-b5714a4acfeb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d741d581-2c9b-4695-a599-d95ac6b4a9ff",
              "32fe24e4-6524-423b-8a25-0c9347392236",
              "656ca38d-8295-4473-8857-d07e0341ca13",
              "02f6f0a6-60ea-4c51-a5f7-4e1a52c85a64",
              "bfa2e4a0-faff-4801-86d1-b5714a4acfeb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 75,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "21c043a2-15ec-4ae6-93b0-970f774f6cfd",
            "title": "DELETE: /groups/:groupId/members/:userId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Member.spec.ts",
            "file": "\\test\\api\\Groups\\Member.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful deleting member from group",
                "fullTitle": "Group member API DELETE: /groups/:groupId/members/:userId Successful deleting member from group",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.members.pop()._id;\n            const res = yield Bootstrap_1.Agent().delete(`/groups/${groupId}/members/${userId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberAndCreator);\n            res.should.have.status(200);\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "9e8a2e06-47ad-4c36-884e-6c1a880b0c52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful deleting user from group although user is not member",
                "fullTitle": "Group member API DELETE: /groups/:groupId/members/:userId Successful deleting user from group although user is not member",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.userButNotMember._id;\n            const res = yield Bootstrap_1.Agent().delete(`/groups/${groupId}/members/${userId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberAndCreator);\n            res.should.have.status(200);\n            res.body.message.should.be.equal(\"successfully\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "aec5fa3a-443e-4d13-8d01-10ee1775b74f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of deleting user from group - only group's creator can do it",
                "fullTitle": "Group member API DELETE: /groups/:groupId/members/:userId Error of deleting user from group - only group's creator can do it",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.userButNotMember._id;\n            const res = yield Bootstrap_1.Agent().delete(`/groups/${groupId}/members/${userId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(403);\n            res.body.message.should.be.equal(\"You cannot do it\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "5fdaed3c-8cb6-41b3-837a-4b4481981a39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of deleting user from group - user is not member",
                "fullTitle": "Group member API DELETE: /groups/:groupId/members/:userId Error of deleting user from group - user is not member",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.userButNotMember._id;\n            const res = yield Bootstrap_1.Agent().delete(`/groups/${groupId}/members/${userId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfUserButNotMember);\n            res.should.have.status(403);\n            res.body.message.should.be.equal(\"You cannot do it\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "5045ec2e-4937-46b7-aac8-209f000fa439",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of deleting user from group - group is not exist",
                "fullTitle": "Group member API DELETE: /groups/:groupId/members/:userId Error of deleting user from group - group is not exist",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const userId = data.members[2]._id;\n            const res = yield Bootstrap_1.Agent().delete(`/groups/groupNotExist/members/${userId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfMemberButNotCreator);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "b655a11c-e8cf-40a4-8ae6-4ddb37d8d623",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9e8a2e06-47ad-4c36-884e-6c1a880b0c52",
              "aec5fa3a-443e-4d13-8d01-10ee1775b74f",
              "5fdaed3c-8cb6-41b3-837a-4b4481981a39",
              "5045ec2e-4937-46b7-aac8-209f000fa439",
              "b655a11c-e8cf-40a4-8ae6-4ddb37d8d623"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 68,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "ba462aba-2ffa-4737-b395-37e8037f6011",
        "title": "Group message API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Message.spec.ts",
        "file": "\\test\\api\\Groups\\Message.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f14a34fd-12c4-42b9-8934-bb894faca727",
            "title": "GET: /groups/:groupId/messages",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Message.spec.ts",
            "file": "\\test\\api\\Groups\\Message.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting messages",
                "fullTitle": "Group message API GET: /groups/:groupId/messages Successful getting messages",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/messages`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.offset.should.be.equal(0);\n            res.body.data.should.have.lengthOf(50);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "6890ba65-5279-4ff3-a90c-855693992edf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful getting messages - use offset",
                "fullTitle": "Group message API GET: /groups/:groupId/messages Successful getting messages - use offset",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/messages`)\n                .query({ offset: 70 })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.offset.should.be.equal(70);\n            res.body.data.should.have.lengthOf(30);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "26003091-141b-416a-8c59-4a54fd0bc05c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting messages - group is not exist",
                "fullTitle": "Group message API GET: /groups/:groupId/messages Error of getting messages - group is not exist",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/groupIsNotExist/messages`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "45553779-a86f-4b59-9996-92c09c5f2b02",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6890ba65-5279-4ff3-a90c-855693992edf",
              "26003091-141b-416a-8c59-4a54fd0bc05c",
              "45553779-a86f-4b59-9996-92c09c5f2b02"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 85,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "84797c77-2140-44bc-ae07-43a5b7708d9d",
            "title": "GET: /groups/:groupId/messages/:messageId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Message.spec.ts",
            "file": "\\test\\api\\Groups\\Message.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting one message by id",
                "fullTitle": "Group message API GET: /groups/:groupId/messages/:messageId Successful getting one message by id",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageId = data.messages[1]._id.toString();\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/messages/${messageId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.should.have.property(\"sender\");\n            res.body.should.have.property(\"group\");\n            res.body.should.have.property(\"text\");\n            res.body.should.have.property(\"sent_at\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "b3587030-22f4-4ae7-9b8e-5680ffdb0583",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting message by id - group is not exist",
                "fullTitle": "Group message API GET: /groups/:groupId/messages/:messageId Error of getting message by id - group is not exist",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageId = data.messages[1]._id.toString();\n            const res = yield Bootstrap_1.Agent().get(`/groups/groupIsNotExist/messages/${messageId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "25dd674e-ab10-4830-901d-1be0d84cec13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting message by id - get wrong id of message",
                "fullTitle": "Group message API GET: /groups/:groupId/messages/:messageId Error of getting message by id - get wrong id of message",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/messages/messageNotExist`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "21c6c7dd-70b8-420e-929b-224a10a27c0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting message by id - message does not belong this group",
                "fullTitle": "Group message API GET: /groups/:groupId/messages/:messageId Error of getting message by id - message does not belong this group",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageId = data.outherMessages[0]._id;\n            const res = yield Bootstrap_1.Agent().get(`/groups/${groupId}/messages/${messageId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"Not Found\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "ee09c487-83b0-45bf-99b3-aafc0a907039",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b3587030-22f4-4ae7-9b8e-5680ffdb0583",
              "25dd674e-ab10-4830-901d-1be0d84cec13",
              "21c6c7dd-70b8-420e-929b-224a10a27c0a",
              "ee09c487-83b0-45bf-99b3-aafc0a907039"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 39,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "5d741d2b-cff8-4110-acb7-aa5b011f7ad1",
            "title": "POST: /groups/:groupId/messages",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Groups\\Message.spec.ts",
            "file": "\\test\\api\\Groups\\Message.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful sending message",
                "fullTitle": "Group message API POST: /groups/:groupId/messages Successful sending message",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageText = \"This is awesome message\";\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/messages`)\n                .send({ text: messageText })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"sender\");\n            res.body.should.have.property(\"group\");\n            res.body.should.have.property(\"text\");\n            res.body.text.should.be.equal(messageText);\n            res.body.should.have.property(\"sent_at\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "0914623f-a6aa-41b2-94d4-18d20c7d31b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of sending message - group is not exist",
                "fullTitle": "Group message API POST: /groups/:groupId/messages Error of sending message - group is not exist",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageText = \"This is awesome message\";\n            const res = yield Bootstrap_1.Agent().post(`/groups/groupIsNotExist/messages`)\n                .send({ text: messageText })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "eb3da0e9-6184-4bf0-8a6b-95e38c487635",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of sending message - text does not get in body",
                "fullTitle": "Group message API POST: /groups/:groupId/messages Error of sending message - text does not get in body",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/groups/${groupId}/messages`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f47c2a47-a0bc-4d74-b761-289ec3db0743",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0914623f-a6aa-41b2-94d4-18d20c7d31b5",
              "eb3da0e9-6184-4bf0-8a6b-95e38c487635",
              "f47c2a47-a0bc-4d74-b761-289ec3db0743"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 28,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "4a8c744f-97db-42a3-a847-3c7837ebb717",
        "title": "User message API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Users\\Message.spec.ts",
        "file": "\\test\\api\\Users\\Message.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "35243ce6-e5c4-4a94-843f-54bf92fbb249",
            "title": "GET: /users/:userId/messages",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Users\\Message.spec.ts",
            "file": "\\test\\api\\Users\\Message.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting conversation between users",
                "fullTitle": "User message API GET: /users/:userId/messages Successful getting conversation between users",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users/${secondPersonId}/messages`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.offset.should.be.equal(0);\n            res.body.data.should.have.lengthOf(50);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "4f912bf4-1d19-4ff8-9b59-2586d633b425",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful getting conversation between users - it's empty",
                "fullTitle": "User message API GET: /users/:userId/messages Successful getting conversation between users - it's empty",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users/${data.anoutherPerson._id}/messages`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.offset.should.be.equal(0);\n            res.body.data.should.have.lengthOf(0);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "89ae3260-dd57-417e-a865-820ec425e01c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful getting conversation between users - use offset",
                "fullTitle": "User message API GET: /users/:userId/messages Successful getting conversation between users - use offset",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users/${secondPersonId}/messages`)\n                .query({ offset: 70 })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.offset.should.be.equal(70);\n            res.body.data.should.have.lengthOf(30);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "35d88418-7a35-4a10-a84e-8017cddb7b4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting conversation between user - user is not exist",
                "fullTitle": "User message API GET: /users/:userId/messages Error of getting conversation between user - user is not exist",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users/userIsNotExist/messages`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "7618d86d-ef18-4e13-b0e7-c13464efb57b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4f912bf4-1d19-4ff8-9b59-2586d633b425",
              "89ae3260-dd57-417e-a865-820ec425e01c",
              "35d88418-7a35-4a10-a84e-8017cddb7b4f",
              "7618d86d-ef18-4e13-b0e7-c13464efb57b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 81,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "67b3c35e-21b2-4317-ab74-8488c788acfd",
            "title": "GET: /users/:userId/messages/:messageId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Users\\Message.spec.ts",
            "file": "\\test\\api\\Users\\Message.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting one message by id",
                "fullTitle": "User message API GET: /users/:userId/messages/:messageId Successful getting one message by id",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageId = data.messages[1]._id.toString();\n            const res = yield Bootstrap_1.Agent().get(`/users/${secondPersonId}/messages/${messageId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.should.have.property(\"sender\");\n            res.body.should.have.property(\"recipient\");\n            res.body.should.have.property(\"text\");\n            res.body.should.have.property(\"sent_at\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "526b90ca-4a86-4c17-8587-9dcbd5420ee3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting message by id - user is not exist",
                "fullTitle": "User message API GET: /users/:userId/messages/:messageId Error of getting message by id - user is not exist",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageId = data.messages[1]._id.toString();\n            const res = yield Bootstrap_1.Agent().get(`/users/userIsNotExist/messages/${messageId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f7bda8e1-3ddb-41f1-b849-c437a15136f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting message by id - get wrong id of message",
                "fullTitle": "User message API GET: /users/:userId/messages/:messageId Error of getting message by id - get wrong id of message",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users/${secondPersonId}/messages/messageNotExist`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "47214835-ff6e-4b17-8c79-e49a0637dac7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting message by id - message does not belong conversation of these users",
                "fullTitle": "User message API GET: /users/:userId/messages/:messageId Error of getting message by id - message does not belong conversation of these users",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageId = data.outherMessages[0]._id;\n            const res = yield Bootstrap_1.Agent().get(`/users/${secondPersonId}/messages/${messageId}`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(404);\n            res.body.message.should.be.equal(\"Not Found\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "77b337bd-4df6-402a-b1dc-b6193c632cf6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "526b90ca-4a86-4c17-8587-9dcbd5420ee3",
              "f7bda8e1-3ddb-41f1-b849-c437a15136f0",
              "47214835-ff6e-4b17-8c79-e49a0637dac7",
              "77b337bd-4df6-402a-b1dc-b6193c632cf6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "6be2b54a-7a7b-4e81-8f3c-fe67f66c3182",
            "title": "POST: /users/:userId/messages",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Users\\Message.spec.ts",
            "file": "\\test\\api\\Users\\Message.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful sending message to user",
                "fullTitle": "User message API POST: /users/:userId/messages Successful sending message to user",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageText = \"This is awesome message\";\n            const res = yield Bootstrap_1.Agent().post(`/users/${secondPersonId}/messages`)\n                .send({ text: messageText })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"sender\");\n            res.body.should.have.property(\"recipient\");\n            res.body.should.have.property(\"text\");\n            res.body.text.should.be.equal(messageText);\n            res.body.should.have.property(\"sent_at\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "6c502403-87fd-4215-89c6-0ec6a0707c60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of sending message to user - user is not exist",
                "fullTitle": "User message API POST: /users/:userId/messages Error of sending message to user - user is not exist",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const messageText = \"This is awesome message\";\n            const res = yield Bootstrap_1.Agent().post(`/users/userIsNotExist/messages`)\n                .send({ text: messageText })\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "0f47352a-4e88-475a-b83a-587fcd56362a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of sending message to user - text does not get in body",
                "fullTitle": "User message API POST: /users/:userId/messages Error of sending message to user - text does not get in body",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().post(`/users/${secondPersonId}/messages`)\n                .set(\"Authorization\", \"Bearer \" + authTokenOfFirstPerson);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "42a840f4-4daa-48e6-8fc2-d66949db6147",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6c502403-87fd-4215-89c6-0ec6a0707c60",
              "0f47352a-4e88-475a-b83a-587fcd56362a",
              "42a840f4-4daa-48e6-8fc2-d66949db6147"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "f0db0595-1cfb-4a43-9b07-54733e55e04c",
        "title": "User get API",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Users\\User.spec.ts",
        "file": "\\test\\api\\Users\\User.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e708d94d-f5b9-4334-9b9c-e5b86a699da7",
            "title": "GET /users/:userId",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Users\\User.spec.ts",
            "file": "\\test\\api\\Users\\User.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting user profile",
                "fullTitle": "User get API GET /users/:userId Successful getting user profile",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users/${firstPersonId}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfFirstPerson}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"username\");\n            res.body.should.have.property(\"fullname\");\n            res.body.should.have.property(\"last_seen\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "eacd7245-8b5e-469e-bd83-94acafa470de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful getting user profile by token of another one",
                "fullTitle": "User get API GET /users/:userId Successful getting user profile by token of another one",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users/${firstPersonId}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfSecondPerson}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"username\");\n            res.body.should.have.property(\"fullname\");\n            res.body.should.have.property(\"last_seen\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "28d93243-7012-4bb1-a62d-e910b44e940c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting user - user is not exist",
                "fullTitle": "User get API GET /users/:userId Error of getting user - user is not exist",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(\"/users/userIsNotExist\")\n                .set(\"Authorization\", `Bearer ${authTokenOfFirstPerson}`);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "610c7439-4cd2-40e7-b30d-ff34bfa339b4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eacd7245-8b5e-469e-bd83-94acafa470de",
              "28d93243-7012-4bb1-a62d-e910b44e940c",
              "610c7439-4cd2-40e7-b30d-ff34bfa339b4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 30,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "4017ce14-e9f0-4000-b7dd-48f9d8a69fcd",
            "title": "GET /users?email=",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\api\\Users\\User.spec.ts",
            "file": "\\test\\api\\Users\\User.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Successful getting user account",
                "fullTitle": "User get API GET /users?email= Successful getting user account",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users?email=${firstPersonEmail}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfFirstPerson}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"username\");\n            res.body.should.have.property(\"fullname\");\n            res.body.should.have.property(\"last_seen\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "3e8998e0-cebe-447d-99e0-ca86e8d064a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Successful getting user profile by token of another one",
                "fullTitle": "User get API GET /users?email= Successful getting user profile by token of another one",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(`/users?email=${firstPersonEmail}`)\n                .set(\"Authorization\", `Bearer ${authTokenOfSecondPerson}`);\n            res.should.have.status(200);\n            res.body.should.have.property(\"id\");\n            res.body.should.have.property(\"username\");\n            res.body.should.have.property(\"fullname\");\n            res.body.should.have.property(\"last_seen\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "85d4cfc0-ebdd-46c1-adfa-1e990d2a3864",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Error of getting user - user is not exist",
                "fullTitle": "User get API GET /users?email= Error of getting user - user is not exist",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const res = yield Bootstrap_1.Agent().get(\"/users?email=userIsNotExist\")\n                .set(\"Authorization\", `Bearer ${authTokenOfFirstPerson}`);\n            res.should.have.status(400);\n            res.body.message.should.be.equal(\"Validation error\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "8debde20-4990-4b20-80e8-3a059c0d9150",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e8998e0-cebe-447d-99e0-ca86e8d064a5",
              "85d4cfc0-ebdd-46c1-adfa-1e990d2a3864",
              "8debde20-4990-4b20-80e8-3a059c0d9150"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 31,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "d71fbbc2-16ee-4364-990c-cd4c57a5cea7",
        "title": "Application",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\unit\\src\\Core\\Application.spec.ts",
        "file": "\\test\\unit\\src\\Core\\Application.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b53648e2-3c9d-4344-9b43-95ca5c44a719",
            "title": "Unique String getter",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\unit\\src\\Core\\Application.spec.ts",
            "file": "\\test\\unit\\src\\Core\\Application.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return random string every call",
                "fullTitle": "Application Unique String getter should return random string every call",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const application = new Application_1.default();\n            const uniqueStrings = [];\n            for (let i = 0; i < 7; i++) {\n                uniqueStrings.push(application.getUniqueString());\n            }\n            allMembersOfArrayAreUnique(uniqueStrings);\n            // console.log(uniqueStrings);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "beab5fc1-ff06-4dae-ad71-42166b3e90c2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return random string every call for different instances",
                "fullTitle": "Application Unique String getter should return random string every call for different instances",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const uniqueStrings = [];\n            for (let i = 0; i < 7; i++) {\n                const application = new Application_1.default();\n                uniqueStrings.push(application.getUniqueString());\n            }\n            allMembersOfArrayAreUnique(uniqueStrings);\n            // console.log(uniqueStrings);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "3245d738-f1b0-4eee-910d-213fa5ebbca3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "beab5fc1-ff06-4dae-ad71-42166b3e90c2",
              "3245d738-f1b0-4eee-910d-213fa5ebbca3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "55b2cbc2-b3a4-45ad-9efb-8185c5a19199",
        "title": "Application Config",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\unit\\src\\Core\\ApplicationConfig.spec.ts",
        "file": "\\test\\unit\\src\\Core\\ApplicationConfig.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should set and get params in dot notation",
            "fullTitle": "Application Config should set and get params in dot notation",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const config = new ApplicationConfig_1.default();\nconst value = \"this is a visual way\";\nconfig.set(\"set.param.in.dot.notation\", value);\nconfig.get(\"set.param.in.dot.notation\").should.be.equal(value);\nconfig.get(\"set.param\").should.be.an(\"object\").which.has.property(\"in\");",
            "err": {},
            "isRoot": false,
            "uuid": "74e4084e-d98d-4ade-a15b-79144c7bcc2f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get undefined for not existing paths if default value not passed",
            "fullTitle": "Application Config should get undefined for not existing paths if default value not passed",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const config = new ApplicationConfig_1.default();\nchai_1.expect(config.get(\"this.path.not.exist\")).to.be.undefined;",
            "err": {},
            "isRoot": false,
            "uuid": "f959d54c-0da8-43f6-aa93-0ae88c9f5ef3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get default value for not existing paths",
            "fullTitle": "Application Config should get default value for not existing paths",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const config = new ApplicationConfig_1.default();\nconfig.get(\"this.path.not.exist\", \"default value\").should.be.equal(\"default value\");",
            "err": {},
            "isRoot": false,
            "uuid": "1ced1c0e-ec85-4879-bbc8-b8736ddab572",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should load params from file and save they to object by file name",
            "fullTitle": "Application Config should load params from file and save they to object by file name",
            "timedOut": false,
            "duration": 622,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "__awaiter(this, void 0, void 0, function* () {\n        const config = new ApplicationConfig_1.default();\n        yield config.loadFromFile(__dirname + \"/_testedconfig.js\");\n        config.get(\"_testedconfig.secret\").should.be.equal(\"test value\");\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "3f6c56fd-f423-4375-9289-58315bffbf66",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should delete params",
            "fullTitle": "Application Config should delete params",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "__awaiter(this, void 0, void 0, function* () {\n        const config = new ApplicationConfig_1.default();\n        config.set(\"test\", \"secret.value\");\n        config.get(\"test\").should.be.equal(\"secret.value\");\n        config.delete(\"test\");\n        chai_1.expect(config.get(\"test\")).to.be.undefined;\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "d54d0b71-4b93-4d27-b6aa-5b16d13ef8ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return existence of param",
            "fullTitle": "Application Config should return existence of param",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "__awaiter(this, void 0, void 0, function* () {\n        const config = new ApplicationConfig_1.default();\n        config.has(\"test\").should.be.false;\n        config.set(\"test\", true);\n        config.has(\"test\").should.be.true;\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "7c57b0ab-229e-4754-b69a-5e967ed969cc",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "74e4084e-d98d-4ade-a15b-79144c7bcc2f",
          "f959d54c-0da8-43f6-aa93-0ae88c9f5ef3",
          "1ced1c0e-ec85-4879-bbc8-b8736ddab572",
          "3f6c56fd-f423-4375-9289-58315bffbf66",
          "d54d0b71-4b93-4d27-b6aa-5b16d13ef8ec",
          "7c57b0ab-229e-4754-b69a-5e967ed969cc"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 622,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "299e06df-c525-4be1-9399-6412be60a1ea",
        "title": "Event Routing - Route",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\unit\\src\\Core\\EventRouter\\Route.spec.ts",
        "file": "\\test\\unit\\src\\Core\\EventRouter\\Route.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should identify right type of payload. We can pass just function",
            "fullTitle": "Event Routing - Route should identify right type of payload. We can pass just function",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const callback = sinon_1.default.spy();\nconst routeGroupMock = sinon_1.default.createStubInstance(RouteGroup_1.default);\nconst route = new Route_1.default(routeGroupMock, \"myHandler\", \"myTestRoute\", callback);\nroute.type.should.be.equal(Route_1.TypeOfPayload.CALLBACK);",
            "err": {},
            "isRoot": false,
            "uuid": "c958e94e-99a2-4d1b-8281-cab2ddaf65c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should identify right type of payload. We can pass string \"ClassName@methodName\" and it will be recognized as JS-class",
            "fullTitle": "Event Routing - Route should identify right type of payload. We can pass string \"ClassName@methodName\" and it will be recognized as JS-class",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const callback = sinon_1.default.spy();\nconst routeGroupMock = sinon_1.default.createStubInstance(RouteGroup_1.default);\nconst route = new Route_1.default(routeGroupMock, \"myHandler\", \"myTestRoute\", \"ClassName@methodName\");\nroute.type.should.be.equal(Route_1.TypeOfPayload.CONTROLLER);",
            "err": {},
            "isRoot": false,
            "uuid": "c01c876b-46c1-4803-a63a-d36d6bab6c9c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should identify right type of payload. We can pass just function without a route name",
            "fullTitle": "Event Routing - Route should identify right type of payload. We can pass just function without a route name",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const callback = sinon_1.default.spy();\nconst routeGroupMock = sinon_1.default.createStubInstance(RouteGroup_1.default);\nconst route = new Route_1.default(routeGroupMock, \"myHandler\", callback);\nroute.type.should.be.equal(Route_1.TypeOfPayload.CALLBACK);",
            "err": {},
            "isRoot": false,
            "uuid": "2441b503-b325-4f30-96f5-6f219eb78e03",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should identify right type of payload. We can pass string \"ClassName@methodName\" without a route name",
            "fullTitle": "Event Routing - Route should identify right type of payload. We can pass string \"ClassName@methodName\" without a route name",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const callback = sinon_1.default.spy();\nconst routeGroupMock = sinon_1.default.createStubInstance(RouteGroup_1.default);\nconst route = new Route_1.default(routeGroupMock, \"myHandler\", \"ClassName@methodName\");\nroute.type.should.be.equal(Route_1.TypeOfPayload.CONTROLLER);",
            "err": {},
            "isRoot": false,
            "uuid": "80de13bc-1f6d-4d5a-ad18-a68c2bda8f74",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return name based on prefix of his event group",
            "fullTitle": "Event Routing - Route should return name based on prefix of his event group",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const prefix = \"prefix:\";\nconst callback = sinon_1.default.spy();\nconst routeGroupMock = sinon_1.default.createStubInstance(RouteGroup_1.default);\nconst route = new Route_1.default(routeGroupMock, \"myHandler\", \"ClassName@methodName\");\nrouteGroupMock.getPrefix.returns(\"\");\nconst nameWithoutPrefix = route.getName();\nrouteGroupMock.getPrefix.returns(prefix);\nroute.getName().should.be.equal(prefix + nameWithoutPrefix);",
            "err": {},
            "isRoot": false,
            "uuid": "6bab7157-c415-42d4-855c-93aff207b2f8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "708319f7-906b-4272-aec5-1a5986721b98",
            "title": "Route applying",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\unit\\src\\Core\\EventRouter\\Route.spec.ts",
            "file": "\\test\\unit\\src\\Core\\EventRouter\\Route.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call its handler with it route payload",
                "fullTitle": "Event Routing - Route Route applying should call its handler with it route payload",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const callback = sinon_1.default.spy();\nconst handler = sinon_1.default.spy();\nconst routeGroupMock = sinon_1.default.createStubInstance(RouteGroup_1.default);\nconst route = new Route_1.default(routeGroupMock, \"myHandler\", \"myTestRoute\", callback);\nroute.apply(handler);\nhandler.calledWithExactly(route.getName(), callback, \"myHandler\").should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "d7332c0a-2cbe-4c77-a7cb-f414d3d9ece8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should apply route payload to its handler only once",
                "fullTitle": "Event Routing - Route Route applying should apply route payload to its handler only once",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const callback = sinon_1.default.spy();\nconst handler = sinon_1.default.spy();\nconst routeGroupMock = sinon_1.default.createStubInstance(RouteGroup_1.default);\nconst route = new Route_1.default(routeGroupMock, \"myHandler\", \"myTestRoute\", callback);\nroute.apply(handler);\nroute.apply(handler);\nhandler.calledOnce.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "896175fd-27ce-4933-ac48-9a1af46c71b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d7332c0a-2cbe-4c77-a7cb-f414d3d9ece8",
              "896175fd-27ce-4933-ac48-9a1af46c71b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [
          "c958e94e-99a2-4d1b-8281-cab2ddaf65c9",
          "c01c876b-46c1-4803-a63a-d36d6bab6c9c",
          "2441b503-b325-4f30-96f5-6f219eb78e03",
          "80de13bc-1f6d-4d5a-ad18-a68c2bda8f74",
          "6bab7157-c415-42d4-855c-93aff207b2f8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 16,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      },
      {
        "uuid": "5c1a1ced-e704-46f6-93e9-13e02a26ac31",
        "title": "Application Lifecycle",
        "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\unit\\src\\Core\\Lifecycle.spec.ts",
        "file": "\\test\\unit\\src\\Core\\Lifecycle.spec.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return correct statuses in each state",
            "fullTitle": "Application Lifecycle should return correct statuses in each state",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "__awaiter(this, void 0, void 0, function* () {\n        const lifecycle = new Lifecycle_1.default(false);\n        lifecycle.getStatus().should.be.equal(Lifecycle_1.Status.NOT_INIT);\n        yield lifecycle.init();\n        lifecycle.getStatus().should.be.equal(Lifecycle_1.Status.WORKING);\n        yield lifecycle.destroy();\n        lifecycle.getStatus().should.be.equal(Lifecycle_1.Status.DESTROYED);\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "f5a3e339-7d1a-4b35-b2b9-bcc98bd4086f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "735e7c4b-da01-4750-97da-764bf29cd085",
            "title": "Handler setter (on)",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\unit\\src\\Core\\Lifecycle.spec.ts",
            "file": "\\test\\unit\\src\\Core\\Lifecycle.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not call handlers right after they adding",
                "fullTitle": "Application Lifecycle Handler setter (on) should not call handlers right after they adding",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const lifecycle = new Lifecycle_1.default(false);\nconst callback = sinon_1.default.spy();\nlifecycle.on(\"beforeInit\", callback);\ncallback.notCalled.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "9d76147d-0b68-4145-9c87-63a55da575d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow adding handler by alias",
                "fullTitle": "Application Lifecycle Handler setter (on) should allow adding handler by alias",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const lifecycle = new Lifecycle_1.default(false);\n            const callback = sinon_1.default.spy();\n            lifecycle.on(\"beforeStart\", callback);\n            callback.notCalled.should.be.true;\n            yield lifecycle.init();\n            callback.called.should.be.true;\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "bc7a65a2-4560-464c-bd9b-f9f20d0bbafb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow to pass object as an event handler",
                "fullTitle": "Application Lifecycle Handler setter (on) should allow to pass object as an event handler",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const lifecycle = new Lifecycle_1.default(false);\n            const object = {\n                beforeInit: sinon_1.default.spy(),\n                otherMethod: sinon_1.default.spy(),\n            };\n            lifecycle.on(object);\n            object.beforeInit.notCalled.should.be.true;\n            object.otherMethod.notCalled.should.be.true;\n            yield lifecycle.init();\n            object.beforeInit.called.should.be.true;\n            object.otherMethod.notCalled.should.be.true;\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "95c465eb-7201-41a7-8341-def6ab10e7b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should ignore if passed only string to first argument",
                "fullTitle": "Application Lifecycle Handler setter (on) should ignore if passed only string to first argument",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const lifecycle = new Lifecycle_1.default(false);\n            lifecycle.on(\"beforeStart\");\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "5c05d888-9289-4cbf-8888-6feb1f2f0714",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9d76147d-0b68-4145-9c87-63a55da575d2",
              "bc7a65a2-4560-464c-bd9b-f9f20d0bbafb",
              "95c465eb-7201-41a7-8341-def6ab10e7b7",
              "5c05d888-9289-4cbf-8888-6feb1f2f0714"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          },
          {
            "uuid": "c439152e-ebe7-48f3-bdba-47539865787d",
            "title": "Lifecycle emitter",
            "fullFile": "d:\\Project\\NJSPROJECTS\\messenger-backend\\test\\unit\\src\\Core\\Lifecycle.spec.ts",
            "file": "\\test\\unit\\src\\Core\\Lifecycle.spec.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call handlers on Lifecycle-events",
                "fullTitle": "Application Lifecycle Lifecycle emitter should call handlers on Lifecycle-events",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const lifecycle = new Lifecycle_1.default(false);\n            const beforeInitCallback = sinon_1.default.spy();\n            const initCallback = sinon_1.default.spy();\n            const afterInitCallback = sinon_1.default.spy();\n            const beforeDestroyCallback = sinon_1.default.spy();\n            const destroyedCallback = sinon_1.default.spy();\n            lifecycle.on(\"beforeInit\", beforeInitCallback);\n            lifecycle.on(\"init\", initCallback);\n            lifecycle.on(\"afterInit\", afterInitCallback);\n            lifecycle.on(\"beforeDestroy\", beforeDestroyCallback);\n            lifecycle.on(\"destroyed\", destroyedCallback);\n            yield lifecycle.init();\n            beforeInitCallback.called.should.be.true;\n            initCallback.calledAfter(beforeInitCallback).should.be.true;\n            afterInitCallback.calledAfter(initCallback).should.be.true;\n            beforeDestroyCallback.notCalled.should.be.true;\n            yield lifecycle.destroy();\n            beforeDestroyCallback.called.should.be.true;\n            destroyedCallback.calledAfter(beforeDestroyCallback).should.be.true;\n            initCallback.calledOnce.should.be.true;\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "10422d37-ed08-492b-984d-64e076deddf6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call methods of passed object which have named as Lifecycle-events ",
                "fullTitle": "Application Lifecycle Lifecycle emitter should call methods of passed object which have named as Lifecycle-events ",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const lifecycle = new Lifecycle_1.default(false);\n            const object = {\n                beforeInit: sinon_1.default.spy(),\n                init: sinon_1.default.spy(),\n                afterInit: sinon_1.default.spy(),\n                beforeDestroy: sinon_1.default.spy(),\n                destroyed: sinon_1.default.spy(),\n            };\n            lifecycle.on(object);\n            yield lifecycle.init();\n            object.beforeInit.called.should.be.true;\n            object.init.calledAfter(object.beforeInit).should.be.true;\n            object.afterInit.calledAfter(object.init).should.be.true;\n            object.beforeDestroy.notCalled.should.be.true;\n            yield lifecycle.destroy();\n            object.beforeDestroy.called.should.be.true;\n            object.destroyed.calledAfter(object.beforeDestroy).should.be.true;\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "b8159eb0-0d08-4508-9d9e-4e70ab872dd2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should catch exceptions",
                "fullTitle": "Application Lifecycle Lifecycle emitter should catch exceptions",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "__awaiter(this, void 0, void 0, function* () {\n            const lifecycle = new Lifecycle_1.default(false);\n            const beforeInitCallback = sinon_1.default.stub().throws();\n            lifecycle.on(\"beforeInit\", beforeInitCallback);\n            yield lifecycle.init();\n            lifecycle.getStatus().should.be.equal(Lifecycle_1.Status.ERROR);\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f50d7b88-d77d-4e42-880d-8840e1779f00",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "10422d37-ed08-492b-984d-64e076deddf6",
              "b8159eb0-0d08-4508-9d9e-4e70ab872dd2",
              "f50d7b88-d77d-4e42-880d-8840e1779f00"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200000
          }
        ],
        "passes": [
          "f5a3e339-7d1a-4b35-b2b9-bcc98bd4086f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 200000
  },
  "copyrightYear": 2019
}